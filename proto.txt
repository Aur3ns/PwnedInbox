import poplib
import time
import subprocess
import smtplib
import os
from email import message_from_bytes
from dotenv import load_dotenv
import logging

# Configurer le logging
logging.basicConfig(filename='script.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Charger les variables d'environnement à partir d'un fichier .env
load_dotenv()

# Récupérer les informations d'authentification à partir des variables d'environnement
USERNAME = os.getenv('GMAIL_USERNAME')
PASSWORD = os.getenv('GMAIL_PASSWORD')
SENDTO = os.getenv('SENDTO_EMAIL')
popserver = 'pop.gmail.com'

def send_mail(subject, body):
    """Envoyer un e-mail"""
    msg = f"Subject: {subject}\n\n{body}"
    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(USERNAME, PASSWORD)
            server.sendmail(USERNAME, SENDTO, msg)
            logging.info(f"Sent email with subject: {subject}")
    except Exception as e:
        logging.error(f"Failed to send email: {e}")

def execute_command(command):
    """Exécuter une commande shell de manière sécurisée"""
    try:
        with subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as process:
            stdout, stderr = process.communicate()
            output = (stdout + stderr).decode()
            if process.returncode == 0:
                return "Command executed successfully. Output: " + output
            else:
                return "Error executing command. Output: " + output
    except Exception as e:
        return f"Error executing command: {e}"

def process_email_message(email_message):
    """Traitement de l'e-mail"""
    subject = email_message['Subject']
    if subject.startswith("!command"):
        command = email_message.get_payload()
        return execute_command(command)
    elif subject == "!status":
        return "System status: OK"
    elif subject == "!help":
        return "Available commands: \n!command <your command>: Execute a command on the system. \n!status: Get system status. \n!help: Get help message."
    else:
        return "Unknown command"

def main():
    """Fonction principale"""
    while True:
        try:
            # Connexion au serveur POP3
            with poplib.POP3_SSL(popserver) as pop:
                pop.user(USERNAME)
                pop.pass_(PASSWORD)

                # Récupération du nombre total de messages
                count, _ = pop.stat()

                # Traitement de tous les messages
                for i in range(count):
                    _, lines, _ = pop.retr(i + 1)
                    email_message = message_from_bytes(b'\n'.join(lines))
                    response = process_email_message(email_message)
                    send_mail("Command Response", response)

                # Attendre pendant une courte période avant de vérifier les nouveaux e-mails
                time.sleep(10)
        except Exception as e:
            logging.error(f"An error occurred: {e}")
            time.sleep(60)  # Attendre un peu plus longtemps avant de réessayer

if __name__ == "__main__":
    main()



Changements Notables :
Ajout de logging pour enregistrer les événements importants et les erreurs.
Lecture et traitement de tous les e-mails dans la boîte de réception.
Marquage des e-mails comme lus ou suppression après traitement peut être ajouté selon les besoins.
Messages d'erreur améliorés pour une meilleure traçabilité des problèmes.
Ce script est plus robuste et sécurisé, ce qui facilite la maintenance et le débogage. Assurez-vous de tester soigneusement le script dans un environnement contrôlé avant de l'utiliser en production.
